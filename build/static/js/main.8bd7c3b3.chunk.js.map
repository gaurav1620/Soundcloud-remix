{"version":3,"sources":["Song.js","Playlist.js","App.js","serviceWorker.js","index.js"],"names":["scPlayer","SoundCloudAudio","Song","props","state","isPlaying","fistTime","play","streamUrl","this","data","uri","setState","pause","keyy","currentPlaying","setCurPlay","className","style","width","src","artwork_url","padding","borderRadius","overflow","textOverflow","textAlign","user","username","whiteSpace","fontSize","title","align","height","onClick","togglePlay","React","Component","Playlist","renderSong","songData","ind","Grid","item","cols","key","currentPLaying","i","setCurrentPlaying","isLoading","fetch","link","then","res","json","result","collection","console","log","justifyContent","container","spacing","list","renderItem","position","bottom","left","backgroundColor","color","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8bd7c3b3.chunk.js","sourcesContent":["\nimport React from 'react';\nimport SoundCloudAudio from 'soundcloud-audio';\nimport './Song.css';\nimport './Font.css'\n\nconst CID = 'a0f84e7c2d612d845125fb5eebff5b37';\nconst scPlayer = new SoundCloudAudio(CID);\n\nclass Song extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            isPlaying : false,\n            fistTime : true,\n        }\n        //props.setCurPlay(-1);\n\n    }\n    \n    playSong(){\n\n        //if(this.state.fistTime){\n            scPlayer.play({\n                streamUrl : this.props.data.uri + '/stream',\n            })\n        //}else{\n        //    scPlayer.play();\n        //}\n        this.setState({\n            isPlaying:true,\n            fistTime : false,\n        })\n\n    }\n    pauseSong(){\n        scPlayer.pause();\n        this.setState({\n            isPlaying : false,\n        })\n    }\n\n    togglePlay(){\n        /*\n        if(this.state.isPlaying){\n            scPlayer.pause();\n            this.props.setCurPlay(-1);\n            this.setState({isPlaying:false,});\n        }else if(this.props.currentPlaying === this.props.keyy\n                    || this.props.currentPlaying === -1){\n            scPlayer.play({\n                streamUrl : this.props.data.uri + '/stream',\n            })\n            this.props.setCurPlay(this.props.keyy);\n            this.setState({isPlaying:true,});\n            //}else{\n            //return;\n            //}\n        }\n        */\n        let onMe = this.props.keyy === this.props.currentPlaying;\n        if(onMe){\n            if(this.state.isPlaying){\n                this.setState({isPlaying:false,});\n                scPlayer.pause();\n                this.props.setCurPlay(-1);\n            }else{\n                       \n            }   \n        }else{\n            if(this.state.isPlaying){\n                scPlayer.pause();\n                //this.setState({isPlaying:false});\n                //this.props.setCurPlay(-1);\n            }else{\n                this.props.setCurPlay(this.props.keyy);\n                scPlayer.play({\n                    streamUrl : this.props.data.uri + '/stream',\n                })\n                this.setState({isPlaying:true});\n            }\n        }\n    }\n    render(){\n        //scPlayer.play({\n        //    streamUrl : this.props.uri,\n        //});\n        return (\n            <div className=\"Song\">\n                <div style={{width : '100%'}}>\n                    <img src={this.props.data.artwork_url} style ={{padding:'3px',width:'100%',borderRadius:'5px'}}/>\n                </div>\n\n                <div style={{overflow:'hidden',textOverflow: \"....\"}}>\n                    <div style={{textAlign:'left'}}>\n                        <p>{\"Artist : \"+this.props.data.user.username}</p>\n                    </div>\n                    <div style={{textAlign:'left',width:'130px',whiteSpace:'nowrap'}}>\n                        <p className=\"Font\" style={{fontSize:'13px'}}>{this.props.data.title}</p>\n                    </div>\n                </div>\n                <div style={{align:'bottom'}}>\n                    {//<button onClick={() => this.playSong()}>play</button>\n                    //<button onClick={() => this.pauseSong()}>pause</button>\n                    }\n                    {this.state.isPlaying ? \n                        <img src=\"icons8-pause-24.png\" width=\"30px\" height=\"30px\" \n                            onClick={() => this.togglePlay()}/>\n                        :<img src=\"icons8-circled-play-30.png\" width=\"35px\" height=\"35px\"\n                            onClick={() => this.togglePlay()}/>\n                    }\n                </div>    \n            </div>\n        );\n        \n    }\n}\n\nexport default Song;\n","import React from 'react';\nimport Song from './Song.js'\nimport FlatList from 'flatlist-react';\nimport Grid from '@material-ui/core/Grid';\nimport './Playlist.css'\nimport './Indicator.css'\n\n\nclass Playlist extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            isLoading : true,\n            data : null,\n            currentPLaying : -1,\n        }\n    }\n\n    componentDidMount(){\n        fetch(this.props.link)\n            .then(res => res.json())\n            .then(result=>{\n                this.setState({\n                    data : [...result.collection],\n                    isLoading : false,\n                })\n            })\n    }\n\n\n    setCurrentPlaying(ind){\n        console.log(\"Changing key from : \"+this.state.currentPLaying+\" to \" + ind);\n        this.setState({\n            currentPLaying : ind,\n        })\n    }\n\n    renderSong = (songData,ind)=>{\n        return(\n            <Grid item cols={6} key={ind}>\n                <Song data={songData} keyy={ind} \n                      currentPlaying={this.state.currentPLaying} \n                      setCurPlay={(i) => this.setCurrentPlaying(i)}/>\n            </Grid>        \n        )\n    }\n\n    render(){\n\n        if(this.state.isLoading){return (<div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>)}\n\n        return (\n            <div className = 'Playlist'>\n                <Grid  style={{justifyContent:'center'}}container spacing={1}>\n                    <FlatList  list={this.state.data} renderItem={this.renderSong}/>\n                </Grid>\n\n                <div style={{position:'fixed',bottom:'0',left:'0',width:'100%'}}>\n                    <div style={{width:\"100%\",height:\"50px\", \n                        backgroundColor:\"black\" , color:'green', fontSize:'30px'}}>\n                        {this.state.currentPLaying == -1 ? \"\":\n                        this.state.data[this.state.currentPLaying].title}\n                    </div>\n                </div>\n            </div>\n        );\n        \n    }\n}\n\nexport default Playlist;\n","import React from 'react';\nimport './App.css';\nimport './Header.css';\nimport './Font.css'\nimport Playlist from './Playlist.js'\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div className=\"Header\">\n                <h1 >Soundcloud rmx</h1>\n            </div>\n            <div className = \"Contents\">\n                <Playlist link = 'https://api.soundcloud.com/users/185676792/favorites?client_id=a0f84e7c2d612d845125fb5eebff5b37&limit=60&linked_partitioning=1'/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}