{"version":3,"sources":["Song.js","Playlist.js","App.js","serviceWorker.js","index.js"],"names":["Song","props","state","playSong","this","setCurPlay","keyy","className","style","width","margin","alt","src","data","artwork_url","borderRadius","textAlign","whiteSpace","overflow","textOverflow","user","username","fontSize","title","align","height","onClick","togglePlay","React","Component","scPlayer","SoundCloudAudio","Playlist","renderSong","songData","ind","Grid","item","cols","key","currentPLaying","i","setCurrentPlaying","isLoading","fetch","link","then","res","json","result","setState","collection","console","log","pause","play","streamUrl","uri","updatePlayer","paddingTop","justifyContent","container","spacing","map","dat","Math","floor","random","length","App","window","navigator","platform","alert","flex","href","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e7f9287c.chunk.js","sourcesContent":["import React from 'react';\nimport './Song.css';\nimport './Font.css'\n\nclass Song extends React.Component{\n\n    constructor(props) {\n      super(props);\n      // Don't call this.setState() here!\n      this.state = { playSong: this.props.playSong };\n    }\n\n    togglePlay(){\n        if(this.props.playSong){\n            this.props.setCurPlay(-1);\n        }else{\n            this.props.setCurPlay(this.props.keyy);\n        }\n    }\n\n\n    render(){\n        //scPlayer.play({\n        //    streamUrl : this.props.uri,\n        //});\n        return (\n            <div className=\"Song\">\n                <div style={{width : '100%',margin:'auto'}}>\n                    <img alt=\"Slow internet Connection\" src={this.props.data.artwork_url} style ={{margin:'auto',width:'100%',borderRadius:'5px'}}/>\n                </div>\n\n                <div style={{}}>\n                    <div style={{textAlign:'left',whiteSpace:'nowrap',overflow:'hidden',textOverflow: \"....\"}}>\n                        <p>{\"Artist : \"+this.props.data.user.username}</p>\n                    </div>\n                    <div style={{textAlign:'left',width:'130px',whiteSpace:'nowrap',overflow:'hidden',textOverflow: \"....\"}}>\n                        <p className=\"Font\" style={{fontSize:'13px'}}>{this.props.data.title}</p>\n                    </div>\n                </div>\n\n\n                <div style={{align:'bottom'}}>\n                    {//<button onClick={() => this.playSong()}>play</button>\n                    //<button onClick={() => this.pauseSong()}>pause</button>\n                        //console.log(\"key : \"+this.props.keyy+\" has playsong prop as : \"+this.props.playSong)\n                    }\n                \n                {this.props.playSong ? \n                        <img alt = \"Pause\" src=\"icons8-pause-24.png\" width=\"30px\" height=\"30px\" \n                            onClick={() => this.togglePlay()}/>\n                        :<img alt =\"Play\" src=\"icons8-circled-play-30.png\" width=\"35px\" height=\"35px\"\n                            onClick={() => this.togglePlay()}/>\n                    }\n                </div>    \n            </div>\n        );\n        \n    }\n}\n\nexport default Song;\n","import React from 'react';\nimport Song from './Song.js'\nimport Grid from '@material-ui/core/Grid';\nimport './Playlist.css'\nimport './Indicator.css'\nimport './styles/Playbar.css'\n\nimport SoundCloudAudio from 'soundcloud-audio';\n\nconst CID = 'a0f84e7c2d612d845125fb5eebff5b37';\nconst scPlayer = new SoundCloudAudio(CID);\n\nclass Playlist extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            isLoading : true,\n            data : null,\n            currentPLaying : -1,\n        }\n    }\n\n    componentDidMount(){\n        fetch(this.props.link)\n            .then(res => res.json())\n            .then(result=>{\n                this.setState({\n                    data : [...result.collection],\n                    isLoading : false,\n                })\n            })\n    }\n\n\n    setCurrentPlaying(ind){\n        console.log(\"Changing key from : \"+this.state.currentPLaying+\" to \" + ind);\n        this.setState({\n            currentPLaying : ind,\n        })\n\n        if(ind === -1){\n            scPlayer.pause();\n        }else{\n            scPlayer.play({\n                streamUrl : this.state.data[ind].uri +'/stream',\n            })\n        }\n    }\n\n    updatePlayer(){\n        if(this.state.currentPLaying === -1){\n            scPlayer.pause();\n        }else{\n            scPlayer.play({\n                streamUrl : this.state.data[this.state.currentPLaying].uri +'/stream',\n            })\n        }\n    }\n\n    renderSong = (songData,ind)=>{\n        return(\n            <Grid item cols={6} key={ind}>\n                <Song data={songData}  \n                      keyy = {ind}\n                      playSong={ind === this.state.currentPLaying}\n                      setCurPlay={(i) => this.setCurrentPlaying(i)}/>\n            </Grid>        \n        )\n    }\n\n    toggleMusic(){\n        console.log(\"called toggle playing : \"+this.state.currentPLaying)\n        if(this.state.currentPLaying === -1){\n            scPlayer.pause();\n            this.setState({currentPLaying:-1});\n        }else{\n            this.setState({currentPLaying:1});\n            console.log(this.state.currentPLaying);\n            console.log(this.state.data);\n            scPlayer.play({\n                streamUrl : this.state.data[this.state.currentPLaying].uri +'/stream',\n            })\n        }\n        //this.updatePlayer();\n    }\n\n    render(){\n\n        this.updatePlayer();\n\n        if(this.state.isLoading){\n            return (\n                <div style={{paddingTop:'200px'}}>\n                <div className=\"lds-ellipsis\">\n                    <div></div><div></div><div></div><div></div></div>\n                </div>\n        )}\n\n        return (\n            <div className = 'Playlist'>\n                <Grid  style={{justifyContent:'center'}}container spacing={1}>\n                    {//<FlatList  list={this.state.data} renderItem={this.renderSong}/>\n                    }\n                    {this.state.data.map((dat,ind)=>        \n                        <Grid item cols={6} key={ind}>\n                            <Song data={dat}  \n                                  keyy = {ind}\n                                  playSong={ind === this.state.currentPLaying}\n                                  setCurPlay={(i) => this.setCurrentPlaying(i)}/>\n                        </Grid>        \n                    )}\n                </Grid>\n\n                <div className='Playbar'>\n\n                    <div className='Song-Name'>\n                        {this.state.currentPLaying === -1 ? \"\":\n                        this.state.data[this.state.currentPLaying].title}\n                    </div>\n                    <div className=\"Play-Pause\"\n                        onClick={()=> this.setState({currentPLaying : this.state.currentPLaying === -1?\n                                            Math.floor(Math.random()*this.state.data.length -1):-1})}>\n                        {this.state.currentPLaying !== -1?\n                            <img alt=\"Play\" src=\"pause-xxl.png\" height='25px' width='25px'/>   \n                           :<img alt=\"Play\" src=\"play-xxl.png\" height='25px' width='25px'/>   \n                        } \n                    </div>\n                </div>\n            </div>\n        );\n        \n    }\n}\n\nexport default Playlist;\n","import React from 'react';\nimport './App.css';\nimport './Header.css';\nimport './Font.css'\nimport Playlist from './Playlist.js'\n\nfunction App() {\n    if(window.navigator.platform === \"Linux armv8l\"){alert(\"FLip your phone for better experience !\")}\n    return (\n        <div className=\"App\">\n            <div className=\"Header\">\n                <div style={{flex:1}}><a href=\"https://github.com/gaurav1620/Soundcloud-remix\"><img src=\"canvas.png\" style={{height:'35px'}}/></a></div>\n                <h3 style={{flex:1}}>Soundcloud rmx</h3>\n                <h6 style={{flex:1}}>Search</h6>\n            </div>\n            <div className = \"Contents\">\n                <Playlist link = 'https://api.soundcloud.com/users/185676792/favorites?client_id=a0f84e7c2d612d845125fb5eebff5b37&limit=60&linked_partitioning=1'/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}